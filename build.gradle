plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.142'
    id 'net.neoforged.gradle.mixin' version '7.0.142'
}

apply from: "allProjects.gradle"

base {
    archivesName = mod_id
}

jarJar.enable()

// AccessTransformers
minecraft.accessTransformers.entry 'public net.minecraft.server.MinecraftServer storageSource'
minecraft.accessTransformers.entry 'public net.minecraft.world.level.biome.BiomeManager biomeZoomSeed'
minecraft.accessTransformers.entry 'public-f net.minecraft.util.profiling.ActiveProfiler WARNING_TIME_NANOS'
minecraft.accessTransformers.entry 'public net.minecraft.server.level.ChunkMap$TrackedEntity'
minecraft.accessTransformers.entry 'public net.minecraft.world.level.GameRules register(Ljava/lang/String;Lnet/minecraft/world/level/GameRules$Category;Lnet/minecraft/world/level/GameRules$Type;)Lnet/minecraft/world/level/GameRules$Key;'
minecraft.accessTransformers.entry 'public net.minecraft.world.level.GameRules$BooleanValue create(Z)Lnet/minecraft/world/level/GameRules$Type;'
minecraft.accessTransformers.entry 'public com.mojang.blaze3d.shaders.Program$Type getGlType()I'
minecraft.accessTransformers.entry 'public-f net.minecraft.world.entity.Entity getBoundingBox()Lnet/minecraft/world/phys/AABB;'
//minecraft.accessTransformers.entry 'public net.minecraft.client.renderer.LevelRenderer$RenderChunkInfo'
//minecraft.accessTransformers.entry 'public net.minecraft.client.renderer.LevelRenderer$RenderChunkInfo <init>(Lnet/minecraft/client/renderer/chunk/ChunkRenderDispatcher$RenderChunk;Lnet/minecraft/core/Direction;I)V'
minecraft.accessTransformers.entry 'public net.minecraft.client.renderer.chunk.SectionRenderDispatcher$RenderSection$CompileTask'
minecraft.accessTransformers.entry 'public-f net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator'
minecraft.accessTransformers.entry 'public net.minecraft.resources.RegistryDataLoader$Loader'
minecraft.accessTransformers.entry 'public net.minecraft.client.gui.screens.worldselection.CreateWorldScreen$MoreTab'
minecraft.accessTransformers.entry 'public net.minecraft.client.multiplayer.ClientChunkCache emptyChunk'
minecraft.accessTransformers.entry 'public net.minecraft.client.multiplayer.ClientChunkCache lightEngine'
minecraft.accessTransformers.entry 'public net.minecraft.client.multiplayer.ClientChunkCache storage'
minecraft.accessTransformers.entry 'public net.minecraft.client.multiplayer.ClientChunkCache level'

// Neo only transformers
minecraft.accessTransformers.entry 'public net.minecraft.world.entity.EntityType$Builder dimensions'
sourceSets {
    main {
        java {
            srcDir "src/main/java"
        }
        resources {
            srcDir "src/main/resources"
        }
    }
}

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

//        modSources = [
//            project(":imm_ptl_core").sourceSets.main,
//            project(":q_misc_util").sourceSets.main,
//            project.sourceSets.main
//        ]
        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        //programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    configs.add("imm_ptl_peripheral.mixins.json")
    configs.add("q_misc_util.mixins.json")
    configs.add("imm_ptl.mixins.json")
    configs.add("imm_ptl_compat.mixins.json")
    configs.add("imm_ptl_fabric.mixins.json")
}

dependencies {
//    // Specify the version of Minecraft to use.
//    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
//    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
//    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
//    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
//    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
//    implementation "net.neoforged:neoforge:${neo_version}"
//
//    // Example mod dependency with JEI
//    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
//    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
//    // compileOnly "mezz.jei:jei-${mc_version}-forge-api:${jei_version}"
//    // runtimeOnly "mezz.jei:jei-${mc_version}-forge:${jei_version}"
//
//    // Example mod dependency using a mod jar from ./libs with a flat dir repository
//    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
//    // The group id is ignored when searching -- in this case, it is "blank"
//    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"
//
//    // Example mod dependency using a file as dependency
//    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")
//
//    // Example project dependency using a sister or child project:
//    // implementation project(":myproject")
//
//    // For more info:
//    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
//    // http://www.gradle.org/docs/current/userguide/dependency_management.html
//    implementation project(":imm_ptl_core")
//    implementation project(":q_misc_util")

//    implementation(jarJar("io.github.llamalad7:mixinextras-neoforge:0.2.1")) {
//        jarJar.ranged(it, "[0.2.1,)")
//    } // With newest NEO automatically enabled
}

tasks.named('build').configure { dependsOn('jarJar') }

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range, issue_tracker_url: issue_tracker_url,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}